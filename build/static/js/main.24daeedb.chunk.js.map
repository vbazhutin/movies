{"version":3,"sources":["api/index.js","components/MovieSearch/Cards/index.js","components/MovieSearch/Form/index.js","components/MovieSearch/index.js","App.js","index.js"],"names":["dotenv","config","query","res","fetch","status","Error","json","error","message","Cards","movies","showSimilar","isVisible","handleToggle","map","movie","i","key","alt","src","poster_path","title","release_date","className","vote_average","overview","onClick","propType","PropType","array","handler","func","similarMoviesHandler","Form","onSubmit","event","preventDefault","type","MovieSearch","SetMovies","useState","SetIsVisible","async","results","api","index","target","elements","value","wasOpened","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+WAEAA,EAAOC,SAEQ,OACb,YAAYC,GACV,IACE,MAAMC,QAAYC,MACf,4FAA2FF,gCAE9F,GAAIC,EAAIE,OAAS,IACf,MAAM,IAAIC,MAAMH,EAAIE,QAGtB,aAAaF,EAAII,OAGnB,MAAOC,GACL,MAAQ,gCAA+BA,EAAMC,UAKjD,cAAcP,GACZ,IACE,MAAMC,QAAYC,MACf,sCAAqCF,oFAExC,GAAIC,EAAIE,OAAS,IACf,MAAM,IAAIC,MAAMH,EAAIE,QAGtB,aAAaF,EAAII,OAGnB,MAAOC,GACL,MAAQ,gCAA+BA,EAAMC,W,MC7B5C,MAAMC,EAAQ,EAAGC,SAAQC,cAAaC,gBAE3C,MAAMC,EAAe,KAEnBF,KAOJ,OAAOD,EAAOI,IAAI,CAACC,EAAOC,IACxB,4BAAQC,IAAKD,GACX,yBAAKE,IAAI,GAAGC,IAAM,mDAAkDJ,EAAMK,cAE1E,oCACE,sCAAiBL,EAAMM,MAAvB,KACA,4CAAkBN,EAAMO,cACxB,uBAAGC,UAAWR,EAAMS,cAAgB,EAAI,OAAS,OAAjD,WAAiET,EAAMS,cACvE,2CAAiBT,EAAMU,UACvB,4BAAQC,QAASb,GAAjB,kBACCD,GACC,yBAAKW,UAAU,iBAEf,mCAURd,EAAMkB,SAAW,CACfjB,OAAQkB,IAASC,MACjBC,QAASF,IAASG,KAClBC,qBAAsBJ,IAASG,M,MCvC1B,MAAME,EAAO,EAAGH,aAQnB,0BAAMI,SANcC,IACpBA,EAAMC,iBACNN,EAAQK,KAKN,gCACA,4BAAQE,KAAK,UAAb,WAKNJ,EAAKN,SAAW,CACdG,QAASF,IAASG,M,MCZb,MAAMO,EAAc,KACzB,MAAO5B,EAAQ6B,GAAaC,mBAAS,KAC9B5B,EAAW6B,GAAgBD,oBAAS,GAmB3C,OACE,8BACE,kBAAC,EAAD,CAAMV,QAnBYY,UAEpB,MAAM,QAACC,SAAiBC,EAAIC,MAAMV,EAAMW,OAAOC,SAAS,GAAGC,OAC3DT,EAAUI,MAiBR,yBAAKpB,UAAU,SACf,kBAAC,EAAD,CAAOb,OAAQA,EAAQC,YATA,KACzB8B,EAAaQ,IAAcA,IAQ+BrC,UAAWA,OC9B5DsC,EAAM,IAEf,kBAAC,EAAD,MCDJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.24daeedb.chunk.js","sourcesContent":["import dotenv from 'dotenv'\n\ndotenv.config()\n\nexport default {\n  async index(query) {\n    try {\n      const res = await fetch(\n        `https://api.themoviedb.org/3/search/movie?api_key=${process.env.REACT_APP_API_KEY}&query=${query}&page=1&include_adult=false`)\n\n      if (res.status > 400) {\n        throw new Error(res.status)\n      }\n\n      return await res.json()\n    }\n\n    catch (error) {\n      return `Currently facing issue with: ${error.message}`\n    }\n\n  },\n\n  async similar(query) {\n    try {\n      const res = await fetch(\n        `https://api.themoviedb.org/3/movie/${query}/recommendations?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&page=1`)\n\n      if (res.status > 400) {\n        throw new Error(res.status)\n      }\n\n      return await res.json()\n    }\n\n    catch (error) {\n      return `Currently facing issue with: ${error.message}`\n    }\n\n  },\n\n}\n","import PropType from 'prop-types'\nimport React from 'react'\n\nimport api from 'api'\n\nimport './Cards.css'\n\nexport const Cards = ({ movies, showSimilar, isVisible }) => {\n\n  const handleToggle = () => {\n    //const similarMovies = await api.similar(event.target.elements[0].value)\n    showSimilar()\n  }\n\n  const renderSimilarMovies = async () => {\n\n  }\n\nreturn movies.map((movie, i) => (\n  <figure key={i}>\n    <img alt=\"\" src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}>\n    </img>\n    <figcaption>\n      <p>Title: &quot;{movie.title}&quot;</p>\n      <p>Release date: {movie.release_date}</p>\n      <p className={movie.vote_average >= 7 ? \"good\" : \"bad\"}>Rating: {movie.vote_average}</p>\n      <p>Description: {movie.overview}</p>\n      <button onClick={handleToggle}>Similar movies</button>\n      {isVisible && (\n        <div className=\"similarMovies\">\n\n        <div>\n\n        </div>\n        </div>\n      )}\n    </figcaption>\n  </figure>\n))\n}\n\nCards.propType = {\n  movies: PropType.array,\n  handler: PropType.func,\n  similarMoviesHandler: PropType.func,\n}\n","import React from 'react'\nimport PropType from 'prop-types'\n\nimport './Form.css'\n\nexport const Form = ({ handler }) => {\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    handler(event)\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input></input>\n      <button type=\"Submit\">Search</button>\n    </form>\n  )\n}\n\nForm.propType = {\n  handler: PropType.func,\n}\n","import React, { useState } from 'react'\n\nimport { Cards } from './Cards'\nimport { Form } from './Form'\n\nimport './MovieSearch.css'\n\nimport api from 'api'\n\nexport const MovieSearch = () => {\n  const [movies, SetMovies] = useState([])\n  const [isVisible, SetIsVisible] = useState(false)\n\n  const searchHandler = async (event) => {\n    // we only need the results property\n    const {results} = await api.index(event.target.elements[0].value)\n    SetMovies(results)\n  }\n\n  const fetchSimilar = async (event) => {\n    // we only need the results property\n    const {results} = await api.similar(event)\n    SetMovies(results)\n  }\n\n  const showSimilarSection = () => {\n    SetIsVisible(wasOpened => !wasOpened)\n    //const results = await api.similar()\n  }\n\n  return (\n    <main>\n      <Form handler={searchHandler}/>\n      <div className=\"cards\">\n      <Cards movies={movies} showSimilar={showSimilarSection} isVisible={isVisible}/>\n      </div>\n    </main>\n  )\n}\n","import React from 'react';\nimport './App.css';\nimport {MovieSearch} from './components'\n\nexport const App = () => {\n  return (\n    <MovieSearch />\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}